package JavaBackend.HomeWork5;

public class HomeWork5 {
    //Повторить все паттерны из каталога "Поведенческие"
    //1) Цепочка обязанностей
    //В паттерне Цепочка Обязанностей создается цепочка объектов,
    //последовательно анализирующих запрос. Каждый объект
    //получает запрос и либо обрабатывает его, либо передает следующему объекту в цепочке.

    //2) Команда
    //Паттерн Команда инкапсулирует запрос в виде объекта, делая возможной параметризацию
    //клиентских объектов с другими запросами, организацию очереди или регистрацию запросов,
    //а также поддержку отмены операций.

    //3) Итератор
    //Паттерн Итератор предоставляет механизм последовательного перебора элементов
    //коллекции без раскрытия ее внутреннего представления.

    //4) Посредник
    //Паттерн позволяет уменьшить связанность множества классов между собой,
    //благодаря перемещению этих связей в один класс-посредник.

    //5) Снимок
    //Паттерн используется для реализации возврата к одному из предыдущих состояний
    //(например, если пользователь выполнил команду «Отменить»).

    //6) Наблюдатель
    //Паттерн определяет отношение «один-ко-многим» между объектами таким образом,
    //что при изменении состояния одного объекта происходит автоматическое оповещение
    //и обновление всех зависимых объектов.

    //7) Состояние
    //Паттерн управляет изменением поведения объекта при изменении
    //его внутреннего состояния. Внешне это выглядит так, словно объект меняет свой класс.

    //8) Стратегия
    //Паттерн определяет семейство схожих алгоритмов и помещает каждый из них
    //в собственный класс, после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.

    //9) Шаблонный метод
    //Паттерн задает «скелет» алгоритма в методе, оставляя определение реализации
    //некоторых шагов субклассам. Субклассы могут переопределять некоторые
    //части алгоритма без изменения его структуры.

    //10) Посетитель
    //Паттерн позволяет добавлять в программу новые операции, не изменяя классы объектов,
    //над которыми эти операции могут выполняться.
}
