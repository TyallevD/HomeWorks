package HomeWork38;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HomeWork38 {
    static int wordsCount = 0;
    static int numsCount = 0;
    static int sentenceCount = 0;
//    static int vowelCount = 0;
//    static int consonatCount = 0;
//    static int punctuationCount = 0;
    static String text = "";

    public static void main(String[] args) {
        //–ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ ASCII.
        //–ù—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å:
        //üî§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        //üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª
        //üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        //üÖ∞Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö
        //üÖ±Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö
        //‚ûï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (—Ç–æ—á–∫–∞, –∑–∞–ø—è—Ç–∞—è, !, ?, ;, :)
        //‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        //–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–∏

        System.out.println("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:");
        String delimeter = "------------------------";
        long startTime = System.nanoTime();
        Thread readerThread = new Thread(() -> {
            long startReaderTime = System.nanoTime();
            try {
                text = new String(Files.readAllBytes(Paths.get("ThreadsRead.txt"))); //todo —Ç—É—Ç –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª
            } catch (IOException e) {
                System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª");
            }
            long endReaderTime = System.nanoTime();
            long durationReader = (endReaderTime - startReaderTime) / 1_000_000;
            System.out.println("–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + durationReader + " –º—Å");
            System.out.println(delimeter);
        });
        try {
            readerThread.start();
            readerThread.join();
        } catch (InterruptedException e) {
            System.out.println("–ü–æ—Ç–æ–∫ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω");
        }

        //–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
        Thread wordsThread = new Thread(() -> {
            long startWordsCountTime = System.nanoTime();
            wordsCount = text.split("\\s+").length;
            System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: " + wordsCount);
            long endWordsCountTime = System.nanoTime();
            long durationWordsCountTime = (endWordsCountTime - startWordsCountTime) / 1_000_000;
            System.out.println("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–≤: " + durationWordsCountTime + " –º—Å");
            System.out.println(delimeter);
        });
        try {
            wordsThread.start();
            wordsThread.join();
        } catch (InterruptedException e) {
            System.out.println("–ü–æ—Ç–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω");
        }

        //–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∏—Å–µ–ª
        Thread numsThread = new Thread(() -> {
            long startNumsCountTime = System.nanoTime();
            Pattern pattern = Pattern.compile("\\b\\d+\\b");
            Matcher matcher = pattern.matcher(text);
            while (matcher.find()) {
                numsCount++;
            }
            System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª: " + numsCount);
            long endNumsCountTime = System.nanoTime();
            long durationNumsCountTime = (endNumsCountTime - startNumsCountTime) / 1_000_000;
            System.out.println("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–≤: " + durationNumsCountTime + " –º—Å");
            System.out.println(delimeter);
        });
        try {
            numsThread.start();
            numsThread.join();
        } catch (InterruptedException e) {
            System.out.println("–ü–æ—Ç–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ —á–∏—Å–µ–ª –ø—Ä–µ—Ä–≤–∞–Ω");
        }

        //–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        Thread sentencesThread = new Thread(() -> {
            long startSentenceCountTime = System.nanoTime();
            sentenceCount = text.split("[.?!]").length;
            System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π : " + sentenceCount);
            long endSentenceCountTime = System.nanoTime();
            long durationSentenceCountTime = (endSentenceCountTime - startSentenceCountTime) / 1_000_000;
            System.out.println("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: " + durationSentenceCountTime + " –º—Å");
            System.out.println(delimeter);
        });
        try {
            sentencesThread.start();
            sentencesThread.join();
        } catch (InterruptedException e) {
            System.out.println("–ü–æ—Ç–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–µ—Ä–≤–∞–Ω");
        }

        //–ü–æ–¥—Å—á–µ—Ç –≥–ª–∞—Å–Ω—ã—Ö
        Thread vowelThread = new Thread(() -> {
//            Pattern pattern = Pattern.compile("[–ê–ï–Å–ò–û–£–≠–Æ–Ø–∞–µ—ë–∏–æ—É—ç—é—èAEIOUYaeiouy]");
//            Matcher matcher = pattern.matcher(text);
//            while (matcher.find()) {
//                vowelCount++;
//            }
            long startVovelCountTime = System.nanoTime();
            String vovelRegex = "[–ê–ï–Å–ò–û–£–≠–Æ–Ø–∞–µ—ë–∏–æ—É—ç—é—èAEIOUYaeiouy]";
            int vowelCount = countMatches(text, vovelRegex);
            System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö: " + vowelCount);
            long endVovelCountTime = System.nanoTime();
            long durationVovelCountTime = (endVovelCountTime - startVovelCountTime) / 1_000_000;
            System.out.println("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞ –≥–ª–∞—Å–Ω—ã—Ö: " + durationVovelCountTime + " –º—Å");
            System.out.println(delimeter);
        });
        try {
            vowelThread.start();
            vowelThread.join();
        } catch (InterruptedException e) {
            System.out.println("–ü–æ—Ç–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ –≥–ª–∞—Å–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω");
        }

        //–ü–æ–¥—Å—á–µ—Ç —Å–æ–≥–ª–∞—Å–Ω—ã—Ö
        Thread consonatThread = new Thread(() -> {
//            Pattern pattern = Pattern.compile("[–ë–í–ì–î–ñ–ó–ô–ö–õ–ú–ù–ü–†–°–¢–§–•–¶–ß–®–©–™–¨–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â—ä—åBCDFGHJKLMNPQRSTVWXZbcdfghjklmnpqrstvwxz]");
//            Matcher matcher = pattern.matcher(text);
//            while (matcher.find()) {
//                consonatCount++;
//            }
            long startConsonatCountTime = System.nanoTime();
            String consonatRegex = "[–ë–í–ì–î–ñ–ó–ô–ö–õ–ú–ù–ü–†–°–¢–§–•–¶–ß–®–©–™–¨–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â—ä—åBCDFGHJKLMNPQRSTVWXZbcdfghjklmnpqrstvwxz]";
            int consonatCount = countMatches(text, consonatRegex);
            System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö: " + consonatCount);
            long endConsonatCountTime = System.nanoTime();
            long durationConsonatCountTime = (endConsonatCountTime - startConsonatCountTime) / 1_000_000;
            System.out.println("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö: " + durationConsonatCountTime + " –º—Å");
            System.out.println(delimeter);
        });
        try {
            consonatThread.start();
            consonatThread.join();
        } catch (InterruptedException e) {
            System.out.println("–ü–æ—Ç–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω");
        }

        //–ü–æ–¥—Å—á–µ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        Thread punctuationThread = new Thread(() -> {
//            Pattern pattern = Pattern.compile("[.,!?:;]");
//            Matcher matcher = pattern.matcher(text);
//            while (matcher.find()) {
//                punctuationCount++;
//            }
            long startPunctuationCountTime = System.nanoTime();
            String punctiationRegex = "[.,!?:;]";
            int punctuationCount = countMatches(text, punctiationRegex);
            System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è: " + punctuationCount);
            long endPunctuationCountTime = System.nanoTime();
            long durationPunctuationCountTime = (endPunctuationCountTime - startPunctuationCountTime) / 1_000_000;
            System.out.println("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è: " + durationPunctuationCountTime + " –º—Å");
            System.out.println(delimeter);
        });
        try {
            punctuationThread.start();
            punctuationThread.join();
        } catch (InterruptedException e) {
            System.out.println("–ü–æ—Ç–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω");
        }
        long endTime = System.nanoTime();
        long duration = (endTime - startTime) / 1_000_000;
        System.out.println("–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + duration + " –º—Å");
    }

    private static int countMatches(String text, String regex) {
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(text);
        int count = 0;
        while (matcher.find()) {
            count++;
        }
        return count;
    }
}
